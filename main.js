!function(){"use strict";class e{constructor(e,t){let{data:s,clickHandler:i,likeHandler:r,deleteHandler:n,userID:o}=e;this._name=s.name,this._link=s.link,this._likes=s.likes,this.id=s._id,this._selectors=t,this._handleCardClick=i,this._handleLikeClick=r,this._handleDeleteClick=n,this._userID=o,this.isLiked=!1}_getTemplate(){return document.querySelector(this._selectors.templateSelector).content.querySelector(this._selectors.cardSelector).cloneNode(!0)}_checkLikes(){this._likes.forEach((e=>{e._id==this._userID&&(this.isLiked=!0)}))}initiateCard(e){this._checkLikes(),this._cardElement=this._getTemplate();const t=this._cardElement.querySelector(this._selectors.titleSelector);return this._image=this._cardElement.querySelector(this._selectors.imageSelector),this._like=this._cardElement.querySelector(this._selectors.likeSelector),this.isLiked&&this._like.classList.add(this._selectors.likeActiveClass),this._likeCount=this._cardElement.querySelector(this._selectors.likeCountSelector),this.setLikeCount(this._likes.length),this._delete=this._cardElement.querySelector(this._selectors.deleteSelector),t.textContent=this._name,this._image.alt="A picture of ".concat(this._name,"."),this._image.src=this._link,e||this._delete.remove(),this._setEventListeners(e),this._cardElement}setLikeCount(e){return this._likeCount.textContent=e}_setEventListeners(e){this._like.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._image.addEventListener("click",(()=>{this._handleCardClick(this._name,this._link)})),e&&this._delete.addEventListener("click",(()=>{this._handleDeleteClick(this)}))}likeCard(){this._like.classList.add(this._selectors.likeActiveClass),this.isLiked=!0}unlikeCard(){this._like.classList.remove(this._selectors.likeActiveClass),this.isLiked=!1}deleteCard(){this._cardElement.remove()}}class t{constructor(e,t){this._formElement=document.querySelector(e),this._keys=t}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}_setEventListeners(){this._inputList=[...this._formElement.querySelectorAll(this._keys.inputSelector)],this._buttonElement=this._formElement.querySelector(this._keys.submitButtonSelector),this._toggleButtonState(),this._formElement.addEventListener("reset",(()=>{setTimeout((()=>{this._toggleButtonState()}))})),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_showInputError(e,t){const s=this._formElement.querySelector(".popup__error_type_".concat(e.id));e.classList.add(this._keys.inputErrorClass),s.textContent=t,s.classList.add(this._keys.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(".popup__error_type_".concat(e.id));e.classList.remove(this._keys.inputErrorClass),t.textContent="",t.classList.remove(this._keys.errorClass)}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._keys.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._keys.inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}}function s(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class i{constructor(e){s(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),s(this,"_handleClickClose",(e=>{e.target.classList.contains("popup")&&this.close()})),this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".popup__exit-button")}close(){this._popupElement.classList.add("invisible"),document.removeEventListener("keydown",this._handleEscClose)}open(){this._popupElement.classList.remove("invisible"),document.addEventListener("keydown",this._handleEscClose)}setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("mousedown",this._handleClickClose)}}function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class n extends i{constructor(e,t){super(e),r(this,"setInputValues",(e=>{this._inputList.forEach((t=>{t.value=e[t.name]}))})),r(this,"renderLoading",(()=>{this._submitButton.textContent="Saving...",this._submitButton.setAttribute("disabled",!0)})),r(this,"renderError",(e=>{this._submitButton.textContent=e,this._submitButton.classList.add("popup__button_status_error")})),r(this,"renderSuccess",(()=>{this._submitButton.textContent="Saved!",this._submitButton.classList.add("popup__button_status_success")})),r(this,"restoreButtonDefaults",(()=>{this._submitButton.textContent=this._submitButton.name,this._submitButton.classList.remove("popup__button_status_error","popup__button_status_success"),this._submitButton.removeAttribute("disabled")})),this._submitHandler=t,this._formElement=this._popupElement.querySelector(".popup__form"),this._submitButton=this._formElement.querySelector(".popup__button"),this._inputList=this._formElement.querySelectorAll(".popup__input")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._formElement.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._submitHandler(t)})),super.setEventListeners()}close(){this._formElement.reset(),super.close()}}const o={inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},l={templateSelector:"#card-template",likeActiveClass:"gallery__button_active",deleteSelector:".gallery__delete-button",likeSelector:".gallery__button",imageSelector:".gallery__image",titleSelector:".gallery__title",cardSelector:".gallery__cell",likeCountSelector:".gallery__like-count"},a=(document.querySelector("#name"),document.querySelector("#job"),document.querySelector(".profile__edit-button")),c=document.querySelector(".profile__add-button"),u=document.querySelector(".profile__avatar-button"),h=new class{constructor(e,t){this._baseUrl=e,this._headers=t}_checkResponse(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}getUserInfo(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._checkResponse)}updateUserData(e){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkResponse)}updateUserAvatar(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})}).then(this._checkResponse)}addNewCard(e){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkResponse)}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(this._checkResponse)}unlikeCard(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"Delete",headers:this._headers}).then(this._checkResponse)}}("https://around.nomoreparties.co/v1/group-12",{authorization:"1ef576b8-6d38-4f6c-aed4-fbb58187f608","Content-Type":"application/json"}),_=new class{constructor(e){let{selectors:t}=e;this._selectors=t,this._userName=document.querySelector(this._selectors.nameSelector),this._userJob=document.querySelector(this._selectors.jobSelector),this._userAvatar=document.querySelector(this._selectors.imageSelector)}getUserInfo(){return{name:this._userName.textContent,about:this._userJob.textContent}}setUserInfo(e){this._userName.textContent=e.name,this._userJob.textContent=e.about,this._userAvatar.src=e.avatar}}({selectors:{nameSelector:".profile__name",jobSelector:".profile__career",imageSelector:".profile__avatar"}}),d=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}addItem(e,t){const s=this._renderer(e);return t?this._container.prepend(s):this._container.append(s)}}({renderer:t=>{const s=new e({data:t,clickHandler:(e,t)=>{E.open(e,t)},likeHandler:e=>{e.isLiked?h.unlikeCard(e.id).then((t=>{e.unlikeCard(),e.setLikeCount(t.likes.length)})).catch((e=>console.log(e))):h.likeCard(e.id).then((t=>{e.likeCard(),e.setLikeCount(t.likes.length)})).catch((e=>console.log(e)))},deleteHandler:e=>{b.open(e)},userID:_.id},l),i=t.owner._id===_.id;return s.initiateCard(i)}},".gallery__container"),p=new n("#edit-container",(e=>{p.renderLoading(),h.updateUserData(e).then((e=>{p.renderSuccess(),_.setUserInfo(e),setTimeout((()=>p.close()),350)})).catch((e=>{console.log(e),p.renderError(e)})).finally((()=>{setTimeout((()=>p.restoreButtonDefaults()),1500)}))})),m=new n("#add-container",(e=>{m.renderLoading(),h.addNewCard(e).then((e=>{m.renderSuccess(),d.addItem(e,!0),setTimeout((()=>m.close()),350)})).catch((e=>{console.log(e),m.renderError(e)})).finally((()=>{setTimeout((()=>m.restoreButtonDefaults()),1500)}))})),k=new n("#avatar-container",(e=>{k.renderLoading(),h.updateUserAvatar(e).then((e=>{k.renderSuccess(),_.setUserInfo(e),setTimeout((()=>k.close()),350)})).catch((e=>{console.log(e),k.renderError(e)})).finally((()=>{setTimeout((()=>k.restoreButtonDefaults()),1500)}))})),b=new class extends i{constructor(e,t){var s,i;super(e),i=e=>{this._confirmButton.textContent=e,this._confirmButton.classList.add("popup__button_status_error"),this._confirmButton.setAttribute("disabled",!0),setTimeout((()=>{this._confirmButton.textContent=this._confirmButton.name,this._confirmButton.classList.remove("popup__button_status_error"),this._confirmButton.removeAttribute("disabled")}),3e3)},(s="renderError")in this?Object.defineProperty(this,s,{value:i,enumerable:!0,configurable:!0,writable:!0}):this[s]=i,this._clickHandler=t,this._confirmButton=this._popupElement.querySelector(".popup__button")}setEventListeners(){this._confirmButton.addEventListener("click",(()=>{this._clickHandler()})),super.setEventListeners()}open(e){this.focusedObj=e,super.open()}}("#delete-container",(()=>{h.deleteCard(b.focusedObj.id).then((()=>{b.focusedObj.deleteCard(),b.focusedObj=null,b.close()})).catch((e=>{console.log(e),b.renderError("Failed to delete")}))})),E=new class extends i{constructor(e){super(e)}open(e,t){this._popupImage=this._popupElement.querySelector(".popup__image"),this._popupImageTitle=this._popupElement.querySelector(".popup__image-title"),this._popupImage.src=t,this._popupImage.alt="Image of ".concat(e),this._popupImageTitle.textContent=e,super.open()}}("#image-container");["#edit-bio","#add-image","#edit-avatar"].forEach((e=>{new t(e,o).enableValidation()})),Promise.all([h.getUserInfo(),h.getInitialCards()]).then((e=>{let[t,s]=e;_.setUserInfo(t),_.id=t._id,s.forEach((e=>{d.addItem(e,!1)}))})).catch((e=>{let[t,s]=e;console.log(t),console.log(s)})),p.setEventListeners(),m.setEventListeners(),k.setEventListeners(),b.setEventListeners(),E.setEventListeners(),a.addEventListener("click",(()=>{p.setInputValues(_.getUserInfo()),p.open()})),c.addEventListener("click",(()=>{m.open()})),u.addEventListener("click",(()=>{k.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,