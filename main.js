!function(){"use strict";class e{constructor(e,t){let{data:s,clickHandler:i,likeHandler:r,deleteHandler:n,userID:o}=e;this._name=s.name,this._link=s.link,this._likes=s.likes,this.id=s._id,this._selectors=t,this._handleCardClick=i,this._handleLikeClick=r,this._handleDeleteClick=n,this._userID=o,this.isLiked=!1}_getTemplate(){return document.querySelector(this._selectors.templateSelector).content.querySelector(this._selectors.cardSelector).cloneNode(!0)}_checkLikes(){this._likes.forEach((e=>{e._id==this._userID&&(this.isLiked=!0)}))}initiateCard(e){this._checkLikes(),this._cardElement=this._getTemplate();const t=this._cardElement.querySelector(this._selectors.titleSelector);return this._image=this._cardElement.querySelector(this._selectors.imageSelector),this._like=this._cardElement.querySelector(this._selectors.likeSelector),this.isLiked&&this._like.classList.add(this._selectors.likeActiveClass),this._likeCount=this._cardElement.querySelector(this._selectors.likeCountSelector),this.setLikeCount(this._likes.length),this._delete=this._cardElement.querySelector(this._selectors.deleteSelector),t.textContent=this._name,this._image.alt="A picture of ".concat(this._name,"."),this._image.src=this._link,e||this._delete.remove(),this._setEventListeners(e),this._cardElement}setLikeCount(e){return this._likeCount.textContent=e}_setEventListeners(e){this._like.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._image.addEventListener("click",(()=>{this._handleCardClick(this._name,this._link)})),e&&this._delete.addEventListener("click",(()=>{this._handleDeleteClick(this)}))}likeCard(){this._like.classList.add(this._selectors.likeActiveClass),this.isLiked=!0}unlikeCard(){this._like.classList.remove(this._selectors.likeActiveClass),this.isLiked=!1}deleteCard(){this._cardElement.remove()}}class t{constructor(e,t){this._formElement=document.querySelector(e),this._keys=t}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}_setEventListeners(){this._inputList=[...this._formElement.querySelectorAll(this._keys.inputSelector)],this._buttonElement=this._formElement.querySelector(this._keys.submitButtonSelector),this._toggleButtonState(),this._formElement.addEventListener("reset",(()=>{setTimeout((()=>{this._toggleButtonState()}))})),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_showInputError(e,t){const s=this._formElement.querySelector(".popup__error_type_".concat(e.id));e.classList.add(this._keys.inputErrorClass),s.textContent=t,s.classList.add(this._keys.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(".popup__error_type_".concat(e.id));e.classList.remove(this._keys.inputErrorClass),t.textContent="",t.classList.remove(this._keys.errorClass)}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._keys.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._keys.inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}}function s(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class i{constructor(e){s(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),s(this,"_handleClickClose",(e=>{e.target.classList.contains("popup")&&this.close()})),this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".popup__exit-button")}close(){this._popupElement.classList.add("invisible"),document.removeEventListener("keydown",this._handleEscClose)}open(){this._popupElement.classList.remove("invisible"),document.addEventListener("keydown",this._handleEscClose)}setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("mousedown",this._handleClickClose)}}function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class n extends i{constructor(e,t){super(e),r(this,"setInputValues",(e=>{this._inputList.forEach((t=>{t.value=e[t.name]}))})),r(this,"renderLoading",(()=>{this._submitButton.textContent="Saving...",this._submitButton.setAttribute("disabled",!0)})),r(this,"renderError",(e=>{this._submitButton.textContent=e,this._submitButton.classList.add("popup__button_status_error")})),r(this,"renderSuccess",(()=>{this._submitButton.textContent="Saved!",this._submitButton.classList.add("popup__button_status_success")})),r(this,"restoreButtonDefaults",(()=>{this._submitButton.textContent=this._submitButton.name,this._submitButton.classList.remove("popup__button_status_error","popup__button_status_success"),this._submitButton.removeAttribute("disabled")})),this._submitHandler=t,this._formElement=this._popupElement.querySelector(".popup__form"),this._submitButton=this._formElement.querySelector(".popup__button"),this._inputList=this._formElement.querySelectorAll(".popup__input")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._formElement.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._submitHandler(t)})),super.setEventListeners()}close(){this._formElement.reset(),super.close()}}const o={inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},l={templateSelector:"#card-template",likeActiveClass:"gallery__button_active",deleteSelector:".gallery__delete-button",likeSelector:".gallery__button",imageSelector:".gallery__image",titleSelector:".gallery__title",cardSelector:".gallery__cell",likeCountSelector:".gallery__like-count"},a=document.querySelector(".profile__edit-button"),c=document.querySelector(".profile__add-button"),u=document.querySelector(".profile__avatar-button"),h=new class{constructor(e,t){this._baseUrl=e,this._headers=t}_checkResponse(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}getUserInfo(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._checkResponse)}updateUserData(e){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkResponse)}updateUserAvatar(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})}).then(this._checkResponse)}addNewCard(e){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkResponse)}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(this._checkResponse)}unlikeCard(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"Delete",headers:this._headers}).then(this._checkResponse)}}("https://around.nomoreparties.co/v1/group-12",{authorization:"1ef576b8-6d38-4f6c-aed4-fbb58187f608","Content-Type":"application/json"}),_=new class{constructor(e){let{selectors:t}=e;this._selectors=t,this._userName=document.querySelector(this._selectors.nameSelector),this._userJob=document.querySelector(this._selectors.jobSelector),this._userAvatar=document.querySelector(this._selectors.imageSelector)}getUserInfo(){return{name:this._userName.textContent,about:this._userJob.textContent}}setUserInfo(e){this._userName.textContent=e.name,this._userJob.textContent=e.about,this._userAvatar.src=e.avatar,this.id=e._id}}({selectors:{nameSelector:".profile__name",jobSelector:".profile__career",imageSelector:".profile__avatar"}}),d=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}addItem(e,t){const s=this._renderer(e);return t?this._container.prepend(s):this._container.append(s)}}({renderer:t=>{const s=new e({data:t,clickHandler:(e,t)=>{E.open(e,t)},likeHandler:e=>{e.isLiked?h.unlikeCard(e.id).then((t=>{e.unlikeCard(),e.setLikeCount(t.likes.length)})).catch((e=>console.log(e))):h.likeCard(e.id).then((t=>{e.likeCard(),e.setLikeCount(t.likes.length)})).catch((e=>console.log(e)))},deleteHandler:e=>{b.open(e)},userID:_.id},l),i=t.owner._id===_.id;return s.initiateCard(i)}},".gallery__container"),p=new n("#edit-container",(e=>{p.renderLoading(),h.updateUserData(e).then((e=>{p.renderSuccess(),_.setUserInfo(e),setTimeout((()=>p.close()),350)})).catch((e=>{console.log(e),p.renderError(e)})).finally((()=>{setTimeout((()=>p.restoreButtonDefaults()),1500)}))})),m=new n("#add-container",(e=>{m.renderLoading(),h.addNewCard(e).then((e=>{m.renderSuccess(),d.addItem(e,!0),setTimeout((()=>m.close()),350)})).catch((e=>{console.log(e),m.renderError(e)})).finally((()=>{setTimeout((()=>m.restoreButtonDefaults()),1500)}))})),k=new n("#avatar-container",(e=>{k.renderLoading(),h.updateUserAvatar(e).then((e=>{k.renderSuccess(),_.setUserInfo(e),setTimeout((()=>k.close()),350)})).catch((e=>{console.log(e),k.renderError(e)})).finally((()=>{setTimeout((()=>k.restoreButtonDefaults()),1500)}))})),b=new class extends i{constructor(e,t){var s,i;super(e),i=e=>{this._confirmButton.textContent=e,this._confirmButton.classList.add("popup__button_status_error"),this._confirmButton.setAttribute("disabled",!0),setTimeout((()=>{this._confirmButton.textContent=this._confirmButton.name,this._confirmButton.classList.remove("popup__button_status_error"),this._confirmButton.removeAttribute("disabled")}),3e3)},(s="renderError")in this?Object.defineProperty(this,s,{value:i,enumerable:!0,configurable:!0,writable:!0}):this[s]=i,this._clickHandler=t,this._confirmButton=this._popupElement.querySelector(".popup__button")}setEventListeners(){this._confirmButton.addEventListener("click",(()=>{this._clickHandler()})),super.setEventListeners()}open(e){this.focusedObj=e,super.open()}}("#delete-container",(()=>{h.deleteCard(b.focusedObj.id).then((()=>{b.focusedObj.deleteCard(),b.focusedObj=null,b.close()})).catch((e=>{console.log(e),b.renderError("Failed to delete")}))})),E=new class extends i{constructor(e){super(e)}open(e,t){this._popupImage=this._popupElement.querySelector(".popup__image"),this._popupImageTitle=this._popupElement.querySelector(".popup__image-title"),this._popupImage.src=t,this._popupImage.alt="Image of ".concat(e),this._popupImageTitle.textContent=e,super.open()}}("#image-container");["#edit-bio","#add-image","#edit-avatar"].forEach((e=>{new t(e,o).enableValidation()})),Promise.all([h.getUserInfo(),h.getInitialCards()]).then((e=>{let[t,s]=e;_.setUserInfo(t),s.forEach((e=>{d.addItem(e,!1)}))})).catch((e=>{let[t,s]=e;console.log(t),console.log(s)})),p.setEventListeners(),m.setEventListeners(),k.setEventListeners(),b.setEventListeners(),E.setEventListeners(),a.addEventListener("click",(()=>{p.setInputValues(_.getUserInfo()),p.open()})),c.addEventListener("click",(()=>{m.open()})),u.addEventListener("click",(()=>{k.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoieUJBQWUsTUFBTUEsRUFDakJDLFlBQVksRUFBNERDLEdBQVcsSUFBdkUsS0FBRUMsRUFBRixhQUFRQyxFQUFSLFlBQXNCQyxFQUF0QixjQUFtQ0MsRUFBbkMsT0FBa0RDLEdBQXFCLEVBQy9FQyxLQUFLQyxNQUFRTixFQUFLTyxLQUNsQkYsS0FBS0csTUFBUVIsRUFBS1MsS0FDbEJKLEtBQUtLLE9BQVNWLEVBQUtXLE1BQ25CTixLQUFLTyxHQUFLWixFQUFLYSxJQUNmUixLQUFLUyxXQUFhZixFQUNsQk0sS0FBS1UsaUJBQW1CZCxFQUN4QkksS0FBS1csaUJBQW1CZCxFQUN4QkcsS0FBS1ksbUJBQXFCZCxFQUMxQkUsS0FBS2EsUUFBVWQsRUFDZkMsS0FBS2MsU0FBVSxFQUduQkMsZUFFSSxPQURvQkMsU0FBU0MsY0FBY2pCLEtBQUtTLFdBQVdTLGtCQUFrQkMsUUFBUUYsY0FBY2pCLEtBQUtTLFdBQVdXLGNBQWNDLFdBQVUsR0FJL0lDLGNBQ0l0QixLQUFLSyxPQUFPa0IsU0FBU0MsSUFDYkEsRUFBS2hCLEtBQU9SLEtBQUthLFVBQVNiLEtBQUtjLFNBQVUsTUFJckRXLGFBQWFDLEdBQ1QxQixLQUFLc0IsY0FDTHRCLEtBQUsyQixhQUFlM0IsS0FBS2UsZUFDekIsTUFBTWEsRUFBUTVCLEtBQUsyQixhQUFhVixjQUFjakIsS0FBS1MsV0FBV29CLGVBZ0I5RCxPQWZBN0IsS0FBSzhCLE9BQVM5QixLQUFLMkIsYUFBYVYsY0FBY2pCLEtBQUtTLFdBQVdzQixlQUM5RC9CLEtBQUtnQyxNQUFRaEMsS0FBSzJCLGFBQWFWLGNBQWNqQixLQUFLUyxXQUFXd0IsY0FDekRqQyxLQUFLYyxTQUNMZCxLQUFLZ0MsTUFBTUUsVUFBVUMsSUFBSW5DLEtBQUtTLFdBQVcyQixpQkFFN0NwQyxLQUFLcUMsV0FBYXJDLEtBQUsyQixhQUFhVixjQUFjakIsS0FBS1MsV0FBVzZCLG1CQUNsRXRDLEtBQUt1QyxhQUFhdkMsS0FBS0ssT0FBT21DLFFBQzlCeEMsS0FBS3lDLFFBQVV6QyxLQUFLMkIsYUFBYVYsY0FBY2pCLEtBQUtTLFdBQVdpQyxnQkFDL0RkLEVBQU1lLFlBQWMzQyxLQUFLQyxNQUN6QkQsS0FBSzhCLE9BQU9jLElBQVosdUJBQWtDNUMsS0FBS0MsTUFBdkMsS0FDQUQsS0FBSzhCLE9BQU9lLElBQU03QyxLQUFLRyxNQUNsQnVCLEdBQ0QxQixLQUFLeUMsUUFBUUssU0FFakI5QyxLQUFLK0MsbUJBQW1CckIsR0FDakIxQixLQUFLMkIsYUFHaEJZLGFBQWFTLEdBQ1QsT0FBT2hELEtBQUtxQyxXQUFXTSxZQUFjSyxFQUd6Q0QsbUJBQW1CckIsR0FDZjFCLEtBQUtnQyxNQUFNaUIsaUJBQWlCLFNBQVMsS0FDakNqRCxLQUFLVyxpQkFBaUJYLFNBRTFCQSxLQUFLOEIsT0FBT21CLGlCQUFpQixTQUFTLEtBQ2xDakQsS0FBS1UsaUJBQWlCVixLQUFLQyxNQUFPRCxLQUFLRyxVQUV2Q3VCLEdBQ0oxQixLQUFLeUMsUUFBUVEsaUJBQWlCLFNBQVMsS0FDbkNqRCxLQUFLWSxtQkFBbUJaLFNBSWhDa0QsV0FDSWxELEtBQUtnQyxNQUFNRSxVQUFVQyxJQUFJbkMsS0FBS1MsV0FBVzJCLGlCQUN6Q3BDLEtBQUtjLFNBQVUsRUFHbkJxQyxhQUNJbkQsS0FBS2dDLE1BQU1FLFVBQVVZLE9BQU85QyxLQUFLUyxXQUFXMkIsaUJBQzVDcEMsS0FBS2MsU0FBVSxFQUduQnNDLGFBRUlwRCxLQUFLMkIsYUFBYW1CLFVDNUVYLE1BQU1PLEVBQ2pCNUQsWUFBWTZELEVBQWNDLEdBQ3RCdkQsS0FBS3dELGFBQWV4QyxTQUFTQyxjQUFjcUMsR0FDM0N0RCxLQUFLeUQsTUFBUUYsRUFHakJHLG1CQUNJMUQsS0FBS3dELGFBQWFQLGlCQUFpQixVQUFXVSxJQUMxQ0EsRUFBSUMsb0JBRVI1RCxLQUFLK0MscUJBR1RBLHFCQUNJL0MsS0FBSzZELFdBQWEsSUFBSTdELEtBQUt3RCxhQUFhTSxpQkFBaUI5RCxLQUFLeUQsTUFBTU0sZ0JBQ3BFL0QsS0FBS2dFLGVBQWlCaEUsS0FBS3dELGFBQWF2QyxjQUFjakIsS0FBS3lELE1BQU1RLHNCQUNqRWpFLEtBQUtrRSxxQkFDTGxFLEtBQUt3RCxhQUFhUCxpQkFBaUIsU0FBUyxLQUN4Q2tCLFlBQVcsS0FDUG5FLEtBQUtrRSwyQkFHYmxFLEtBQUs2RCxXQUFXdEMsU0FBUzZDLElBQ3JCQSxFQUFhbkIsaUJBQWlCLFNBQVMsS0FDbkNqRCxLQUFLcUUsb0JBQW9CRCxHQUN6QnBFLEtBQUtrRSwyQkFLakJHLG9CQUFvQkQsR0FDWEEsRUFBYUUsU0FBU0MsTUFHdkJ2RSxLQUFLd0UsZ0JBQWdCSixHQUZyQnBFLEtBQUt5RSxnQkFBZ0JMLEVBQWNBLEVBQWFNLG1CQU14REQsZ0JBQWdCTCxFQUFjTyxHQUMxQixNQUFNQyxFQUFlNUUsS0FBS3dELGFBQWF2QyxjQUFsQiw2QkFBc0RtRCxFQUFhN0QsS0FDeEY2RCxFQUFhbEMsVUFBVUMsSUFBSW5DLEtBQUt5RCxNQUFNb0IsaUJBQ3RDRCxFQUFhakMsWUFBY2dDLEVBQzNCQyxFQUFhMUMsVUFBVUMsSUFBSW5DLEtBQUt5RCxNQUFNcUIsWUFHMUNOLGdCQUFnQkosR0FDWixNQUFNUSxFQUFlNUUsS0FBS3dELGFBQWF2QyxjQUFsQiw2QkFBc0RtRCxFQUFhN0QsS0FDeEY2RCxFQUFhbEMsVUFBVVksT0FBTzlDLEtBQUt5RCxNQUFNb0IsaUJBQ3pDRCxFQUFhakMsWUFBYyxHQUMzQmlDLEVBQWExQyxVQUFVWSxPQUFPOUMsS0FBS3lELE1BQU1xQixZQUc3Q1oscUJBQ1FsRSxLQUFLK0UsaUJBQWlCL0UsS0FBSzZELGFBQzNCN0QsS0FBS2dFLGVBQWU5QixVQUFVQyxJQUFJbkMsS0FBS3lELE1BQU11QixxQkFDN0NoRixLQUFLZ0UsZUFBZWlCLGFBQWEsWUFBWSxLQUU3Q2pGLEtBQUtnRSxlQUFlOUIsVUFBVVksT0FBTzlDLEtBQUt5RCxNQUFNdUIscUJBQ2hEaEYsS0FBS2dFLGVBQWVrQixnQkFBZ0IsYUFJNUNILG1CQUNJLE9BQU8vRSxLQUFLNkQsV0FBV3NCLE1BQU1mLElBQ2pCQSxFQUFhRSxTQUFTQyxTLHdIQ2hFM0IsTUFBTWEsRUFDakIzRixZQUFZNEYsR0FBZSwwQkFLUjFCLElBQ0MsV0FBWkEsRUFBSTJCLEtBQ0p0RixLQUFLdUYsV0FQYyw0QkFXTjVCLElBQ2JBLEVBQUk2QixPQUFPdEQsVUFBVXVELFNBQVMsVUFDOUJ6RixLQUFLdUYsV0FaVHZGLEtBQUswRixjQUFnQjFFLFNBQVNDLGNBQWNvRSxHQUM1Q3JGLEtBQUsyRixhQUFlM0YsS0FBSzBGLGNBQWN6RSxjQUFjLHVCQWV6RHNFLFFBQ0l2RixLQUFLMEYsY0FBY3hELFVBQVVDLElBQUksYUFDakNuQixTQUFTNEUsb0JBQW9CLFVBQVc1RixLQUFLNkYsaUJBR2pEQyxPQUNJOUYsS0FBSzBGLGNBQWN4RCxVQUFVWSxPQUFPLGFBQ3BDOUIsU0FBU2lDLGlCQUFpQixVQUFXakQsS0FBSzZGLGlCQUc5Q0Usb0JBQ0kvRixLQUFLMkYsYUFBYTFDLGlCQUFpQixTQUFTLEtBQ3hDakQsS0FBS3VGLFdBRVR2RixLQUFLMEYsY0FBY3pDLGlCQUFpQixZQUFhakQsS0FBS2dHLG9CLHdIQzlCL0MsTUFBTUMsVUFBc0JiLEVBQ3ZDM0YsWUFBWTRGLEVBQWVhLEdBQ3ZCQyxNQUFNZCxHQURnQyx5QkF5QnhCMUYsSUFDZEssS0FBSzZELFdBQVd0QyxTQUFTNkUsSUFDckJBLEVBQU1DLE1BQVExRyxFQUFLeUcsRUFBTWxHLFlBM0JTLHdCQW9DMUIsS0FDWkYsS0FBS3NHLGNBQWMzRCxZQUFjLFlBQ2pDM0MsS0FBS3NHLGNBQWNyQixhQUFhLFlBQVksTUF0Q04sc0JBeUMzQnNCLElBQ1h2RyxLQUFLc0csY0FBYzNELFlBQWM0RCxFQUNqQ3ZHLEtBQUtzRyxjQUFjcEUsVUFBVUMsSUFBSSxpQ0EzQ0ssd0JBOEMxQixLQUNabkMsS0FBS3NHLGNBQWMzRCxZQUFjLFNBQ2pDM0MsS0FBS3NHLGNBQWNwRSxVQUFVQyxJQUFJLG1DQWhESyxnQ0FtRGxCLEtBQ3BCbkMsS0FBS3NHLGNBQWMzRCxZQUFjM0MsS0FBS3NHLGNBQWNwRyxLQUNwREYsS0FBS3NHLGNBQWNwRSxVQUFVWSxPQUFPLDZCQUE4QixnQ0FDbEU5QyxLQUFLc0csY0FBY3BCLGdCQUFnQixlQXBEbkNsRixLQUFLd0csZUFBaUJOLEVBQ3RCbEcsS0FBS3dELGFBQWV4RCxLQUFLMEYsY0FBY3pFLGNBQWMsZ0JBQ3JEakIsS0FBS3NHLGNBQWdCdEcsS0FBS3dELGFBQWF2QyxjQUFjLGtCQUNyRGpCLEtBQUs2RCxXQUFhN0QsS0FBS3dELGFBQWFNLGlCQUFpQixpQkFHekQyQyxrQkFDSSxNQUFNQyxFQUFVLEdBSWhCLE9BSEExRyxLQUFLNkQsV0FBV3RDLFNBQVM2RSxJQUNyQk0sRUFBUU4sRUFBTWxHLE1BQVFrRyxFQUFNQyxTQUV6QkssRUFHWFgsb0JBQ0kvRixLQUFLd0QsYUFBYVAsaUJBQWlCLFVBQVdVLElBQzFDQSxFQUFJQyxpQkFDSixNQUFNK0MsRUFBUzNHLEtBQUt5RyxrQkFDcEJ6RyxLQUFLd0csZUFBZUcsTUFFeEJSLE1BQU1KLG9CQVNWUixRQUNJdkYsS0FBS3dELGFBQWFvRCxRQUNsQlQsTUFBTVosU0NwQ2QsTUFBTXNCLEVBQWdCLENBQ2xCOUMsY0FBZSxnQkFDZkUscUJBQXNCLGlCQUN0QmUsb0JBQXFCLHlCQUNyQkgsZ0JBQWlCLDBCQUNqQkMsV0FBWSx3QkFHVmdDLEVBQW1CLENBQ3ZCNUYsaUJBQWtCLGlCQUNsQmtCLGdCQUFpQix5QkFDakJNLGVBQWdCLDBCQUNoQlQsYUFBYyxtQkFDZEYsY0FBZSxrQkFDZkYsY0FBZSxrQkFDZlQsYUFBYyxpQkFDZGtCLGtCQUFtQix3QkFHZnlFLEVBQWEvRixTQUFTQyxjQUFjLHlCQUNwQytGLEVBQVloRyxTQUFTQyxjQUFjLHdCQUNuQ2dHLEVBQWVqRyxTQUFTQyxjQUFjLDJCQ1J0Q2lHLEVBQWEsSUNiSixNQUNYekgsWUFBWTBILEVBQVNDLEdBQ2pCcEgsS0FBS3FILFNBQVdGLEVBQ2hCbkgsS0FBS3NILFNBQVdGLEVBR3BCRyxlQUFlQyxHQUNYLE9BQUlBLEVBQUlDLEdBQVdELEVBQUlFLE9BQ2hCQyxRQUFRQyxPQUFSLGlCQUF5QkosRUFBSUssU0FHeENDLGNBQ0ksT0FBT0MsTUFBTSxHQUFELE9BQUkvSCxLQUFLcUgsU0FBVCxhQUE4QixDQUN0Q0QsUUFBU3BILEtBQUtzSCxXQUVqQlUsS0FBS2hJLEtBQUt1SCxnQkFHZlUsa0JBQ0ssT0FBT0YsTUFBTSxHQUFELE9BQUkvSCxLQUFLcUgsU0FBVCxVQUEyQixDQUNwQ0QsUUFBU3BILEtBQUtzSCxXQUVqQlUsS0FBS2hJLEtBQUt1SCxnQkFHZlcsZUFBZXZJLEdBQ1gsT0FBT29JLE1BQU0sR0FBRCxPQUFJL0gsS0FBS3FILFNBQVQsYUFBOEIsQ0FDdENjLE9BQVEsUUFDUmYsUUFBU3BILEtBQUtzSCxTQUNkYyxLQUFNQyxLQUFLQyxVQUFVLENBQ2pCcEksS0FBTVAsRUFBS08sS0FDWHFJLE1BQU81SSxFQUFLNEksVUFHbkJQLEtBQUtoSSxLQUFLdUgsZ0JBR2ZpQixpQkFBaUI3SSxHQUNiLE9BQU9vSSxNQUFNLEdBQUQsT0FBSS9ILEtBQUtxSCxTQUFULG9CQUFxQyxDQUM3Q2MsT0FBUSxRQUNSZixRQUFTcEgsS0FBS3NILFNBQ2RjLEtBQU1DLEtBQUtDLFVBQVUsQ0FDakJHLE9BQVE5SSxFQUFLOEksV0FHcEJULEtBQUtoSSxLQUFLdUgsZ0JBR2ZtQixXQUFXL0ksR0FDUCxPQUFPb0ksTUFBTSxHQUFELE9BQUkvSCxLQUFLcUgsU0FBVCxVQUEyQixDQUNuQ2MsT0FBUSxPQUNSZixRQUFTcEgsS0FBS3NILFNBQ2RjLEtBQU1DLEtBQUtDLFVBQVUsQ0FDakJwSSxLQUFNUCxFQUFLTyxLQUNYRSxLQUFNVCxFQUFLUyxTQUdsQjRILEtBQUtoSSxLQUFLdUgsZ0JBR2ZuRSxXQUFXdUYsR0FDUCxPQUFPWixNQUFNLEdBQUQsT0FBSS9ILEtBQUtxSCxTQUFULGtCQUEyQnNCLEdBQVUsQ0FDN0NSLE9BQVEsU0FDUmYsUUFBU3BILEtBQUtzSCxXQUVqQlUsS0FBS2hJLEtBQUt1SCxnQkFHZnJFLFNBQVN5RixHQUNMLE9BQU9aLE1BQU0sR0FBRCxPQUFJL0gsS0FBS3FILFNBQVQsd0JBQWlDc0IsR0FBVSxDQUNuRFIsT0FBUSxNQUNSZixRQUFTcEgsS0FBS3NILFdBRWpCVSxLQUFLaEksS0FBS3VILGdCQUdmcEUsV0FBV3dGLEdBQ1AsT0FBT1osTUFBTSxHQUFELE9BQUkvSCxLQUFLcUgsU0FBVCx3QkFBaUNzQixHQUFVLENBQ25EUixPQUFRLFNBQ1JmLFFBQVNwSCxLQUFLc0gsV0FFakJVLEtBQUtoSSxLQUFLdUgsa0JEcEVRLDhDQUMzQixDQUFFcUIsY0FBZSx1Q0FBd0MsZUFBZ0IscUJBRW5FQyxFQUFVLElFaEJELE1BQ1hwSixZQUFZLEdBQWUsSUFBZixVQUFFQyxHQUFhLEVBQ3ZCTSxLQUFLUyxXQUFhZixFQUNsQk0sS0FBSzhJLFVBQVk5SCxTQUFTQyxjQUFjakIsS0FBS1MsV0FBV3NJLGNBQ3hEL0ksS0FBS2dKLFNBQVdoSSxTQUFTQyxjQUFjakIsS0FBS1MsV0FBV3dJLGFBQ3ZEakosS0FBS2tKLFlBQWNsSSxTQUFTQyxjQUFjakIsS0FBS1MsV0FBV3NCLGVBRzlEK0YsY0FDSSxNQUFPLENBQUM1SCxLQUFNRixLQUFLOEksVUFBVW5HLFlBQWE0RixNQUFPdkksS0FBS2dKLFNBQVNyRyxhQUduRXdHLFlBQVl4SixHQUNSSyxLQUFLOEksVUFBVW5HLFlBQWNoRCxFQUFLTyxLQUNsQ0YsS0FBS2dKLFNBQVNyRyxZQUFjaEQsRUFBSzRJLE1BQ2pDdkksS0FBS2tKLFlBQVlyRyxJQUFNbEQsRUFBSzhJLE9BQzVCekksS0FBS08sR0FBS1osRUFBS2EsTUZBTSxDQUFFZCxVRE9ULENBQUNxSixhQUFjLGlCQUFrQkUsWUFBYSxtQkFBb0JsSCxjQUFlLHNCQ0xqR3FILEVBQWMsSUdsQkwsTUFDWDNKLFlBQVksRUFBYzRKLEdBQW1CLElBQWpDLFNBQUVDLEdBQStCLEVBQ3pDdEosS0FBS3VKLFVBQVlELEVBQ2pCdEosS0FBS3dKLFdBQWF4SSxTQUFTQyxjQUFjb0ksR0FHN0NJLFFBQVFDLEVBQU1DLEdBQ1YsTUFBTUMsRUFBTzVKLEtBQUt1SixVQUFVRyxHQUM1QixPQUFJQyxFQUFjM0osS0FBS3dKLFdBQVdLLFFBQVFELEdBQ25DNUosS0FBS3dKLFdBQVdNLE9BQU9GLEtIU04sQ0FDOUJOLFNBQVdTLElBQ1gsTUFBTUMsRUFBVyxJQUFJeEssRUFBSyxDQUFFRyxLQUFNb0ssRUFDbENuSyxhQUFjLENBQUNnQyxFQUFPeEIsS0FBVTZKLEVBQVduRSxLQUFLbEUsRUFBT3hCLElBQ3ZEUCxZQUFjcUssSUFDUEEsRUFBSXBKLFFBUVBvRyxFQUFXL0QsV0FBVytHLEVBQUkzSixJQUN6QnlILE1BQU1SLElBQ0wwQyxFQUFJL0csYUFDSitHLEVBQUkzSCxhQUFhaUYsRUFBSWxILE1BQU1rQyxXQUU1QjJILE9BQU1DLEdBQU9DLFFBQVFDLElBQUlGLEtBWjFCbEQsRUFBV2hFLFNBQVNnSCxFQUFJM0osSUFDdkJ5SCxNQUFNUixJQUNMMEMsRUFBSWhILFdBQ0pnSCxFQUFJM0gsYUFBYWlGLEVBQUlsSCxNQUFNa0MsV0FFNUIySCxPQUFNQyxHQUFPQyxRQUFRQyxJQUFJRixNQVM5QnRLLGNBQWdCb0ssSUFDZEssRUFBa0J6RSxLQUFLb0UsSUFFekJuSyxPQUFROEksRUFBUXRJLElBQ2hCdUcsR0FDTXBGLEVBQWFxSSxFQUFTUyxNQUFNaEssTUFBUXFJLEVBQVF0SSxHQUVsRCxPQURvQnlKLEVBQVN2SSxhQUFhQyxLQUd6Qyx1QkFFRytJLEVBQVUsSUFBSXhFLEVBQWMsbUJBQW9CdEcsSUFDcEQ4SyxFQUFRQyxnQkFDUnhELEVBQVdnQixlQUFldkksR0FDekJxSSxNQUFNUixJQUNMaUQsRUFBUUUsZ0JBQ1I5QixFQUFRTSxZQUFZM0IsR0FDcEJyRCxZQUFXLElBQU1zRyxFQUFRbEYsU0FBUyxRQUVuQzRFLE9BQU9DLElBQ05DLFFBQVFDLElBQUlGLEdBQ1pLLEVBQVFHLFlBQVlSLE1BRXJCUyxTQUFRLEtBQ1AxRyxZQUFXLElBQU1zRyxFQUFRSyx5QkFBeUIsWUFJaERDLEVBQVUsSUFBSTlFLEVBQWMsa0JBQW1CdEcsSUFDbkRvTCxFQUFRTCxnQkFDUnhELEVBQVd3QixXQUFXL0ksR0FDckJxSSxNQUFNUixJQUNMdUQsRUFBUUosZ0JBQ1J2QixFQUFZSyxRQUFRakMsR0FBSyxHQUN6QnJELFlBQVcsSUFBTTRHLEVBQVF4RixTQUFTLFFBRW5DNEUsT0FBT0MsSUFDTkMsUUFBUUMsSUFBSUYsR0FDWlcsRUFBUUgsWUFBWVIsTUFFckJTLFNBQVEsS0FDUDFHLFlBQVcsSUFBTTRHLEVBQVFELHlCQUF5QixZQUloREUsRUFBYSxJQUFJL0UsRUFBYyxxQkFBc0J0RyxJQUN6RHFMLEVBQVdOLGdCQUNYeEQsRUFBV3NCLGlCQUFpQjdJLEdBQzNCcUksTUFBTVIsSUFDTHdELEVBQVdMLGdCQUNYOUIsRUFBUU0sWUFBWTNCLEdBQ3BCckQsWUFBVyxJQUFNNkcsRUFBV3pGLFNBQVMsUUFFdEM0RSxPQUFPQyxJQUNOQyxRQUFRQyxJQUFJRixHQUNaWSxFQUFXSixZQUFZUixNQUV4QlMsU0FBUSxLQUNQMUcsWUFBVyxJQUFNNkcsRUFBV0YseUJBQXlCLFlBSW5EUCxFQUFvQixJSWxHWCxjQUFvQ25GLEVBQy9DM0YsWUFBWTRGLEVBQWV6RixHLFFBQ3ZCdUcsTUFBTWQsRyxFQVlLNEYsSUFDWGpMLEtBQUtrTCxlQUFldkksWUFBY3NJLEVBQ2xDakwsS0FBS2tMLGVBQWVoSixVQUFVQyxJQUFJLDhCQUNsQ25DLEtBQUtrTCxlQUFlakcsYUFBYSxZQUFZLEdBQzdDZCxZQUFXLEtBQ1BuRSxLQUFLa0wsZUFBZXZJLFlBQWMzQyxLQUFLa0wsZUFBZWhMLEtBQ3RERixLQUFLa0wsZUFBZWhKLFVBQVVZLE9BQU8sOEJBQ3JDOUMsS0FBS2tMLGVBQWVoRyxnQkFBZ0IsY0FDckMsTyxFQXJCa0Msc0Isc0JBQUEsSyx1REFBQSxLLEtBRXJDbEYsS0FBS21MLGNBQWdCdkwsRUFDckJJLEtBQUtrTCxlQUFpQmxMLEtBQUswRixjQUFjekUsY0FBYyxrQkFHM0Q4RSxvQkFDSS9GLEtBQUtrTCxlQUFlakksaUJBQWlCLFNBQVEsS0FDekNqRCxLQUFLbUwsbUJBRVRoRixNQUFNSixvQkFjVkQsS0FBS29FLEdBQ0RsSyxLQUFLb0wsV0FBYWxCLEVBQ2xCL0QsTUFBTUwsU0p1RXNDLHFCQUFxQixLQUN2RW9CLEVBQVc5RCxXQUFXbUgsRUFBa0JhLFdBQVc3SyxJQUNsRHlILE1BQUssS0FDSnVDLEVBQWtCYSxXQUFXaEksYUFDN0JtSCxFQUFrQmEsV0FBYSxLQUMvQmIsRUFBa0JoRixXQUVuQjRFLE9BQU9DLElBQ05DLFFBQVFDLElBQUlGLEdBQ1pHLEVBQWtCSyxZQUFZLDBCQUk1QlgsRUFBYSxJSy9HSixjQUE2QjdFLEVBQ3hDM0YsWUFBWTRGLEdBQ1JjLE1BQU1kLEdBR1ZTLEtBQUtsRSxFQUFPeEIsR0FDUkosS0FBS3FMLFlBQWNyTCxLQUFLMEYsY0FBY3pFLGNBQWMsaUJBQ3BEakIsS0FBS3NMLGlCQUFtQnRMLEtBQUswRixjQUFjekUsY0FBYyx1QkFDekRqQixLQUFLcUwsWUFBWXhJLElBQU16QyxFQUN2QkosS0FBS3FMLFlBQVl6SSxJQUFqQixtQkFBbUNoQixHQUNuQzVCLEtBQUtzTCxpQkFBaUIzSSxZQUFjZixFQUNwQ3VFLE1BQU1MLFNMb0d3QixvQkQzRmhCLENBQUMsWUFBYSxhQUFjLGdCQzZGcEN2RSxTQUFTZ0ssSUFDQyxJQUFJbEksRUFBY2tJLEVBQVUxRSxHQUNwQ25ELHNCQUtoQmlFLFFBQVE2RCxJQUFJLENBQUN0RSxFQUFXWSxjQUFlWixFQUFXZSxvQkFDL0NELE1BQUssSUFBdUIsSUFBckJ5RCxFQUFVQyxHQUFXLEVBQzNCN0MsRUFBUU0sWUFBWXNDLEdBQ3BCQyxFQUFNbkssU0FBU21JLElBQ2JOLEVBQVlLLFFBQVFDLEdBQU0sU0FHN0JTLE9BQU0sSUFBeUIsSUFBdkJ3QixFQUFTQyxHQUFjLEVBQzlCdkIsUUFBUUMsSUFBSXFCLEdBQ1p0QixRQUFRQyxJQUFJc0IsTUFHaEJuQixFQUFRMUUsb0JBRVJnRixFQUFRaEYsb0JBRVJpRixFQUFXakYsb0JBRVh3RSxFQUFrQnhFLG9CQUVsQmtFLEVBQVdsRSxvQkFHWGdCLEVBQVc5RCxpQkFBaUIsU0FBUyxLQUNuQ3dILEVBQVFvQixlQUFlaEQsRUFBUWYsZUFDL0IyQyxFQUFRM0UsVUFHVmtCLEVBQVUvRCxpQkFBaUIsU0FBUyxLQUNsQzhILEVBQVFqRixVQUdWbUIsRUFBYWhFLGlCQUFpQixTQUFTLEtBQ3JDK0gsRUFBV2xGLFUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3NjcmlwdHMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybWF0aW9uLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xyXG4gICAgY29uc3RydWN0b3IoeyBkYXRhLCBjbGlja0hhbmRsZXIsIGxpa2VIYW5kbGVyLCBkZWxldGVIYW5kbGVyLCB1c2VySUQgfSwgc2VsZWN0b3JzKSB7XHJcbiAgICAgICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcclxuICAgICAgICB0aGlzLl9saW5rID0gZGF0YS5saW5rO1xyXG4gICAgICAgIHRoaXMuX2xpa2VzID0gZGF0YS5saWtlcztcclxuICAgICAgICB0aGlzLmlkID0gZGF0YS5faWQ7XHJcbiAgICAgICAgdGhpcy5fc2VsZWN0b3JzID0gc2VsZWN0b3JzO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayA9IGNsaWNrSGFuZGxlcjtcclxuICAgICAgICB0aGlzLl9oYW5kbGVMaWtlQ2xpY2sgPSBsaWtlSGFuZGxlcjtcclxuICAgICAgICB0aGlzLl9oYW5kbGVEZWxldGVDbGljayA9IGRlbGV0ZUhhbmRsZXI7XHJcbiAgICAgICAgdGhpcy5fdXNlcklEID0gdXNlcklEO1xyXG4gICAgICAgIHRoaXMuaXNMaWtlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRUZW1wbGF0ZSgpIHtcclxuICAgICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fc2VsZWN0b3JzLnRlbXBsYXRlU2VsZWN0b3IpLmNvbnRlbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9zZWxlY3RvcnMuY2FyZFNlbGVjdG9yKS5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIGNhcmRFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIF9jaGVja0xpa2VzKCkge1xyXG4gICAgICAgIHRoaXMuX2xpa2VzLmZvckVhY2goKGxpa2UpID0+IHtcclxuICAgICAgICAgICAgaWYgKGxpa2UuX2lkID09IHRoaXMuX3VzZXJJRCkgdGhpcy5pc0xpa2VkID0gdHJ1ZTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGluaXRpYXRlQ2FyZChpc1VzZXJDYXJkKSB7XHJcbiAgICAgICAgdGhpcy5fY2hlY2tMaWtlcygpO1xyXG4gICAgICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcclxuICAgICAgICBjb25zdCB0aXRsZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fc2VsZWN0b3JzLnRpdGxlU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX2ltYWdlID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9zZWxlY3RvcnMuaW1hZ2VTZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5fbGlrZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fc2VsZWN0b3JzLmxpa2VTZWxlY3Rvcik7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNMaWtlZCkgeyBcclxuICAgICAgICAgICAgdGhpcy5fbGlrZS5jbGFzc0xpc3QuYWRkKHRoaXMuX3NlbGVjdG9ycy5saWtlQWN0aXZlQ2xhc3MpXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLl9saWtlQ291bnQgPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX3NlbGVjdG9ycy5saWtlQ291bnRTZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5zZXRMaWtlQ291bnQodGhpcy5fbGlrZXMubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLl9kZWxldGUgPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX3NlbGVjdG9ycy5kZWxldGVTZWxlY3Rvcik7XHJcbiAgICAgICAgdGl0bGUudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG4gICAgICAgIHRoaXMuX2ltYWdlLmFsdCA9IGBBIHBpY3R1cmUgb2YgJHt0aGlzLl9uYW1lfS5gO1xyXG4gICAgICAgIHRoaXMuX2ltYWdlLnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICAgICAgaWYgKCFpc1VzZXJDYXJkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlbGV0ZS5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoaXNVc2VyQ2FyZCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHNldExpa2VDb3VudChsaWtlQ291bnQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGlrZUNvdW50LnRleHRDb250ZW50ID0gbGlrZUNvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIF9zZXRFdmVudExpc3RlbmVycyhpc1VzZXJDYXJkKSB7XHJcbiAgICAgICAgdGhpcy5fbGlrZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVMaWtlQ2xpY2sodGhpcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICB0aGlzLl9pbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sodGhpcy5fbmFtZSwgdGhpcy5fbGluayk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICBpZiAoaXNVc2VyQ2FyZCkge1xyXG4gICAgICAgIHRoaXMuX2RlbGV0ZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVEZWxldGVDbGljayh0aGlzKTtcclxuICAgICAgICB9KX1cclxuICAgIH1cclxuXHJcbiAgICBsaWtlQ2FyZCgpIHtcclxuICAgICAgICB0aGlzLl9saWtlLmNsYXNzTGlzdC5hZGQodGhpcy5fc2VsZWN0b3JzLmxpa2VBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgdGhpcy5pc0xpa2VkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB1bmxpa2VDYXJkKCkge1xyXG4gICAgICAgIHRoaXMuX2xpa2UuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9zZWxlY3RvcnMubGlrZUFjdGl2ZUNsYXNzKTtcclxuICAgICAgICB0aGlzLmlzTGlrZWQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVDYXJkKCkge1xyXG4gICAgICAgIC8vdGhpcy5fY2FyZEVsZW1lbnQgPSBudWxsOyB0aGlzIGRvZXNuJ3Qgd29yay8vXHJcbiAgICAgICAgdGhpcy5fY2FyZEVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGZvcm1TZWxlY3RvciwgdmFsaWRhdGlvbktleXMpIHtcclxuICAgICAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZm9ybVNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLl9rZXlzID0gdmFsaWRhdGlvbktleXM7XHJcbiAgICB9XHJcblxyXG4gICAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcclxuICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB0aGlzLl9pbnB1dExpc3QgPSBbLi4udGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9rZXlzLmlucHV0U2VsZWN0b3IpXTtcclxuICAgICAgICB0aGlzLl9idXR0b25FbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9rZXlzLnN1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNldFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTsgXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpIHtcclxuICAgICAgICBpZiAoIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQsIGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQsIGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYC5wb3B1cF9fZXJyb3JfdHlwZV8ke2lucHV0RWxlbWVudC5pZH1gKTtcclxuICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9rZXlzLmlucHV0RXJyb3JDbGFzcyk7XHJcbiAgICAgICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2tleXMuZXJyb3JDbGFzcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAucG9wdXBfX2Vycm9yX3R5cGVfJHtpbnB1dEVsZW1lbnQuaWR9YCk7XHJcbiAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fa2V5cy5pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICAgICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fa2V5cy5lcnJvckNsYXNzKTsgXHJcbiAgICB9XHJcblxyXG4gICAgX3RvZ2dsZUJ1dHRvblN0YXRlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQodGhpcy5faW5wdXRMaXN0KSkge1xyXG4gICAgICAgICAgICB0aGlzLl9idXR0b25FbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fa2V5cy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCB0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9idXR0b25FbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fa2V5cy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIF9oYXNJbnZhbGlkSW5wdXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lucHV0TGlzdC5zb21lKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX2Nsb3NlQnV0dG9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2V4aXQtYnV0dG9uXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIF9oYW5kbGVFc2NDbG9zZSA9IChldnQpID0+IHtcclxuICAgICAgICBpZiAoZXZ0LmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9oYW5kbGVDbGlja0Nsb3NlID0gKGV2dCkgPT4ge1xyXG4gICAgICAgIGlmIChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInBvcHVwXCIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJpbnZpc2libGVcIik7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW4oKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJpbnZpc2libGVcIik7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuX2Nsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX2hhbmRsZUNsaWNrQ2xvc2UpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvciwgc3VibWl0SGFuZGxlcikge1xyXG4gICAgICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEhhbmRsZXIgPSBzdWJtaXRIYW5kbGVyO1xyXG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2Zvcm1cIik7XHJcbiAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fYnV0dG9uXCIpO1xyXG4gICAgICAgIHRoaXMuX2lucHV0TGlzdCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucG9wdXBfX2lucHV0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgICAgICBjb25zdCByZXN1bHRzID0ge307XHJcbiAgICAgICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgICAgICAgIHJlc3VsdHNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgY29uc3QgaW5wdXRzID0gdGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKTtcclxuICAgICAgICAgICAgdGhpcy5fc3VibWl0SGFuZGxlcihpbnB1dHMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTsgXHJcbiAgICB9XHJcblxyXG4gICAgc2V0SW5wdXRWYWx1ZXMgPSAoZGF0YSkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICAgICAgICBpbnB1dC52YWx1ZSA9IGRhdGFbaW5wdXQubmFtZV07XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9mb3JtRWxlbWVudC5yZXNldCgpO1xyXG4gICAgICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyTG9hZGluZyA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmluZy4uLlwiO1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJFcnJvciA9IChlcnJvcikgPT4ge1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IGVycm9yO1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwicG9wdXBfX2J1dHRvbl9zdGF0dXNfZXJyb3JcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyU3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmVkIVwiO1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwicG9wdXBfX2J1dHRvbl9zdGF0dXNfc3VjY2Vzc1wiKVxyXG4gICAgfVxyXG5cclxuICAgIHJlc3RvcmVCdXR0b25EZWZhdWx0cyA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSB0aGlzLl9zdWJtaXRCdXR0b24ubmFtZTtcclxuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZShcInBvcHVwX19idXR0b25fc3RhdHVzX2Vycm9yXCIsIFwicG9wdXBfX2J1dHRvbl9zdGF0dXNfc3VjY2Vzc1wiKTtcclxuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XHJcbiAgICB9XHJcbn0iLCJjb25zdCB2YWxpZGF0aW9uT2JqID0ge1xyXG4gICAgaW5wdXRTZWxlY3RvcjogXCIucG9wdXBfX2lucHV0XCIsXHJcbiAgICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIucG9wdXBfX2J1dHRvblwiLFxyXG4gICAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJwb3B1cF9fYnV0dG9uX2Rpc2FibGVkXCIsXHJcbiAgICBpbnB1dEVycm9yQ2xhc3M6IFwicG9wdXBfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICAgIGVycm9yQ2xhc3M6IFwicG9wdXBfX2Vycm9yX3Zpc2libGVcIlxyXG59XHJcblxyXG5jb25zdCBjYXJkU2VsZWN0b3JMaXN0ID0ge1xyXG4gIHRlbXBsYXRlU2VsZWN0b3I6IFwiI2NhcmQtdGVtcGxhdGVcIixcclxuICBsaWtlQWN0aXZlQ2xhc3M6IFwiZ2FsbGVyeV9fYnV0dG9uX2FjdGl2ZVwiLFxyXG4gIGRlbGV0ZVNlbGVjdG9yOiBcIi5nYWxsZXJ5X19kZWxldGUtYnV0dG9uXCIsXHJcbiAgbGlrZVNlbGVjdG9yOiBcIi5nYWxsZXJ5X19idXR0b25cIixcclxuICBpbWFnZVNlbGVjdG9yOiBcIi5nYWxsZXJ5X19pbWFnZVwiLFxyXG4gIHRpdGxlU2VsZWN0b3I6IFwiLmdhbGxlcnlfX3RpdGxlXCIsXHJcbiAgY2FyZFNlbGVjdG9yOiBcIi5nYWxsZXJ5X19jZWxsXCIsXHJcbiAgbGlrZUNvdW50U2VsZWN0b3I6IFwiLmdhbGxlcnlfX2xpa2UtY291bnRcIlxyXG59XHJcblxyXG5jb25zdCBlZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19lZGl0LWJ1dHRvblwiKTtcclxuY29uc3QgYWRkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hZGQtYnV0dG9uXCIpO1xyXG5jb25zdCBhdmF0YXJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2F2YXRhci1idXR0b25cIik7XHJcbmNvbnN0IGZvcm1TZWxlY3RvcnMgPSBbXCIjZWRpdC1iaW9cIiwgXCIjYWRkLWltYWdlXCIsIFwiI2VkaXQtYXZhdGFyXCJdO1xyXG5jb25zdCB1c2VyU2VsZWN0b3JzID0ge25hbWVTZWxlY3RvcjogXCIucHJvZmlsZV9fbmFtZVwiLCBqb2JTZWxlY3RvcjogXCIucHJvZmlsZV9fY2FyZWVyXCIsIGltYWdlU2VsZWN0b3I6IFwiLnByb2ZpbGVfX2F2YXRhclwifTtcclxuXHJcblxyXG5leHBvcnQgeyB2YWxpZGF0aW9uT2JqLCBjYXJkU2VsZWN0b3JMaXN0LCBlZGl0QnV0dG9uLCBhZGRCdXR0b24sIGZvcm1TZWxlY3RvcnMsIHVzZXJTZWxlY3RvcnMsIGF2YXRhckJ1dHRvbiB9IiwiaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcclxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vc2NyaXB0cy9jb21wb25lbnRzL0FwaS5qc1wiO1xyXG5pbXBvcnQgQ2FyZCBmcm9tIFwiLi4vc2NyaXB0cy9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL3NjcmlwdHMvY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XHJcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9zY3JpcHRzL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL3NjcmlwdHMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vc2NyaXB0cy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aENvbmZpcm1hdGlvbiBmcm9tIFwiLi4vc2NyaXB0cy9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbi5qc1wiO1xyXG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL3NjcmlwdHMvY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xyXG5pbXBvcnQgeyB2YWxpZGF0aW9uT2JqLCBjYXJkU2VsZWN0b3JMaXN0LCBlZGl0QnV0dG9uLCBhZGRCdXR0b24sIGZvcm1TZWxlY3RvcnMsIHVzZXJTZWxlY3RvcnMsIGF2YXRhckJ1dHRvbiB9IGZyb20gXCIuLi9zY3JpcHRzL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5cclxuLy9IZXJlIHRvIGxpbmUgMTIwOiBpbml0aWF0aW5nIGNsYXNzZXNcclxuXHJcbmNvbnN0IHByb2plY3RBcGkgPSBuZXcgQXBpKFwiaHR0cHM6Ly9hcm91bmQubm9tb3JlcGFydGllcy5jby92MS9ncm91cC0xMlwiLCBcclxueyBhdXRob3JpemF0aW9uOiBcIjFlZjU3NmI4LTZkMzgtNGY2Yy1hZWQ0LWZiYjU4MTg3ZjYwOFwiLCBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9KTtcclxuXHJcbmNvbnN0IHVzZXJCaW8gPSBuZXcgVXNlckluZm8oeyBzZWxlY3RvcnM6IHVzZXJTZWxlY3RvcnMgfSk7XHJcblxyXG5jb25zdCBjYXJkU2VjdGlvbiA9IG5ldyBTZWN0aW9uKHtcclxuICByZW5kZXJlcjogKGNhcmREYXRhKSA9PiB7XHJcbiAgY29uc3QgY2FyZEl0ZW0gPSBuZXcgQ2FyZCh7IGRhdGE6IGNhcmREYXRhLCBcclxuICBjbGlja0hhbmRsZXI6ICh0aXRsZSwgbGluaykgPT4ge3BvcHVwSW1hZ2Uub3Blbih0aXRsZSwgbGluayl9LCBcclxuICBsaWtlSGFuZGxlcjogKG9iaikgPT4ge1xyXG4gICAgaWYgKCFvYmouaXNMaWtlZCkge1xyXG4gICAgICBwcm9qZWN0QXBpLmxpa2VDYXJkKG9iai5pZClcclxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgIG9iai5saWtlQ2FyZCgpO1xyXG4gICAgICAgIG9iai5zZXRMaWtlQ291bnQocmVzLmxpa2VzLmxlbmd0aCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSl9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcHJvamVjdEFwaS51bmxpa2VDYXJkKG9iai5pZClcclxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgIG9iai51bmxpa2VDYXJkKCk7XHJcbiAgICAgICAgb2JqLnNldExpa2VDb3VudChyZXMubGlrZXMubGVuZ3RoKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKX1cclxuICAgIH0sIFxyXG4gIGRlbGV0ZUhhbmRsZXI6IChvYmopID0+IHtcclxuICAgIGRlbGV0ZUNvbmZpcm1hdG9uLm9wZW4ob2JqKTtcclxuICB9LCBcclxuICB1c2VySUQ6IHVzZXJCaW8uaWR9LCBcclxuICBjYXJkU2VsZWN0b3JMaXN0KTtcclxuICBjb25zdCBpc1VzZXJDYXJkID0gY2FyZERhdGEub3duZXIuX2lkID09PSB1c2VyQmlvLmlkO1xyXG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gY2FyZEl0ZW0uaW5pdGlhdGVDYXJkKGlzVXNlckNhcmQpO1xyXG4gIHJldHVybiBjYXJkRWxlbWVudDtcclxufVxyXG59LCBcIi5nYWxsZXJ5X19jb250YWluZXJcIik7XHJcblxyXG5jb25zdCBiaW9Gb3JtID0gbmV3IFBvcHVwV2l0aEZvcm0oXCIjZWRpdC1jb250YWluZXJcIiwgKGRhdGEpID0+IHtcclxuICBiaW9Gb3JtLnJlbmRlckxvYWRpbmcoKTtcclxuICBwcm9qZWN0QXBpLnVwZGF0ZVVzZXJEYXRhKGRhdGEpXHJcbiAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgYmlvRm9ybS5yZW5kZXJTdWNjZXNzKCk7XHJcbiAgICB1c2VyQmlvLnNldFVzZXJJbmZvKHJlcyk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IGJpb0Zvcm0uY2xvc2UoKSwgMzUwKTtcclxuICB9KVxyXG4gIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgYmlvRm9ybS5yZW5kZXJFcnJvcihlcnIpO1xyXG4gIH0pXHJcbiAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiBiaW9Gb3JtLnJlc3RvcmVCdXR0b25EZWZhdWx0cygpLCAxNTAwKTtcclxuICB9KVxyXG59KTtcclxuXHJcbmNvbnN0IGFkZEZvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybShcIiNhZGQtY29udGFpbmVyXCIsIChkYXRhKSA9PiB7XHJcbiAgYWRkRm9ybS5yZW5kZXJMb2FkaW5nKCk7XHJcbiAgcHJvamVjdEFwaS5hZGROZXdDYXJkKGRhdGEpXHJcbiAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgYWRkRm9ybS5yZW5kZXJTdWNjZXNzKCk7XHJcbiAgICBjYXJkU2VjdGlvbi5hZGRJdGVtKHJlcywgdHJ1ZSk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IGFkZEZvcm0uY2xvc2UoKSwgMzUwKTtcclxuICB9KVxyXG4gIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgYWRkRm9ybS5yZW5kZXJFcnJvcihlcnIpO1xyXG4gIH0pXHJcbiAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiBhZGRGb3JtLnJlc3RvcmVCdXR0b25EZWZhdWx0cygpLCAxNTAwKTtcclxuICB9KVxyXG59KVxyXG5cclxuY29uc3QgYXZhdGFyRm9ybSA9IG5ldyBQb3B1cFdpdGhGb3JtKFwiI2F2YXRhci1jb250YWluZXJcIiwgKGRhdGEpID0+IHtcclxuICBhdmF0YXJGb3JtLnJlbmRlckxvYWRpbmcoKTtcclxuICBwcm9qZWN0QXBpLnVwZGF0ZVVzZXJBdmF0YXIoZGF0YSlcclxuICAudGhlbigocmVzKSA9PiB7XHJcbiAgICBhdmF0YXJGb3JtLnJlbmRlclN1Y2Nlc3MoKTtcclxuICAgIHVzZXJCaW8uc2V0VXNlckluZm8ocmVzKTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4gYXZhdGFyRm9ybS5jbG9zZSgpLCAzNTApO1xyXG4gIH0pXHJcbiAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICBhdmF0YXJGb3JtLnJlbmRlckVycm9yKGVycik7XHJcbiAgfSlcclxuICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IGF2YXRhckZvcm0ucmVzdG9yZUJ1dHRvbkRlZmF1bHRzKCksIDE1MDApO1xyXG4gIH0pXHJcbn0pXHJcblxyXG5jb25zdCBkZWxldGVDb25maXJtYXRvbiA9IG5ldyBQb3B1cFdpdGhDb25maXJtYXRpb24oXCIjZGVsZXRlLWNvbnRhaW5lclwiLCAoKSA9PiB7XHJcbiAgcHJvamVjdEFwaS5kZWxldGVDYXJkKGRlbGV0ZUNvbmZpcm1hdG9uLmZvY3VzZWRPYmouaWQpXHJcbiAgLnRoZW4oKCkgPT4ge1xyXG4gICAgZGVsZXRlQ29uZmlybWF0b24uZm9jdXNlZE9iai5kZWxldGVDYXJkKCk7XHJcbiAgICBkZWxldGVDb25maXJtYXRvbi5mb2N1c2VkT2JqID0gbnVsbDtcclxuICAgIGRlbGV0ZUNvbmZpcm1hdG9uLmNsb3NlKCk7XHJcbiAgfSlcclxuICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgIGRlbGV0ZUNvbmZpcm1hdG9uLnJlbmRlckVycm9yKFwiRmFpbGVkIHRvIGRlbGV0ZVwiKTtcclxuICB9KVxyXG59KVxyXG5cclxuY29uc3QgcG9wdXBJbWFnZSA9IG5ldyBQb3B1cFdpdGhJbWFnZShcIiNpbWFnZS1jb250YWluZXJcIik7XHJcblxyXG5mb3JtU2VsZWN0b3JzLmZvckVhY2goKHNlbGVjdG9yKSA9PiB7XHJcbiAgY29uc3QgdmFsaWRhdGVkRm9ybSA9IG5ldyBGb3JtVmFsaWRhdG9yKHNlbGVjdG9yLCB2YWxpZGF0aW9uT2JqKTtcclxuICB2YWxpZGF0ZWRGb3JtLmVuYWJsZVZhbGlkYXRpb24oKTtcclxufSk7XHJcbi8vQWxzbywgc29ycnkgaWYgSSB3YXNuJ3QgYWxsb3dlZCB0byBhZGQgYWxsIHRoZXNlIGV4dHJhIFVYIGNoYW5nZXMsIGp1c3QgdGhvdWdodCBpdCBsb29rZWQgbmljZSBhbmQgd2FzIGEgZ29vZCB3YXkgdG8gY29tbXVuaWNhdGUgc3VjY2Vzcy9mYWlsdXJlXHJcblxyXG4vL2hlcmUgdG8gbGluZSAxNDU6IGNhbGxpbmcgbWV0aG9kc1xyXG5Qcm9taXNlLmFsbChbcHJvamVjdEFwaS5nZXRVc2VySW5mbygpLCBwcm9qZWN0QXBpLmdldEluaXRpYWxDYXJkcygpXSlcclxuICAudGhlbigoW3VzZXJEYXRhLCBjYXJkc10pID0+IHtcclxuICAgIHVzZXJCaW8uc2V0VXNlckluZm8odXNlckRhdGEpO1xyXG4gICAgY2FyZHMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICBjYXJkU2VjdGlvbi5hZGRJdGVtKGl0ZW0sIGZhbHNlKTtcclxuICAgIH0pXHJcbiAgfSlcclxuICAuY2F0Y2goKFt1c2VyRXJyLCBjYXJkc0Vycl0pID0+IHtcclxuICAgIGNvbnNvbGUubG9nKHVzZXJFcnIpO1xyXG4gICAgY29uc29sZS5sb2coY2FyZHNFcnIpO1xyXG4gIH0pO1xyXG5cclxuYmlvRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuYWRkRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuYXZhdGFyRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuZGVsZXRlQ29uZmlybWF0b24uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbnBvcHVwSW1hZ2Uuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vaGVyZSB0byBlbmQ6IGFkZGluZyBldmVudCBsaXN0ZW5lcnNcclxuZWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGJpb0Zvcm0uc2V0SW5wdXRWYWx1ZXModXNlckJpby5nZXRVc2VySW5mbygpKTtcclxuICBiaW9Gb3JtLm9wZW4oKTtcclxufSk7XHJcblxyXG5hZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBhZGRGb3JtLm9wZW4oKTtcclxufSlcclxuXHJcbmF2YXRhckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGF2YXRhckZvcm0ub3BlbigpO1xyXG59KSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XHJcbiAgICBjb25zdHJ1Y3RvcihiYXNlVXJsLCBoZWFkZXJzKSB7XHJcbiAgICAgICAgdGhpcy5fYmFzZVVybCA9IGJhc2VVcmw7XHJcbiAgICAgICAgdGhpcy5faGVhZGVycyA9IGhlYWRlcnM7XHJcbiAgICB9XHJcblxyXG4gICAgX2NoZWNrUmVzcG9uc2UocmVzKSB7XHJcbiAgICAgICAgaWYgKHJlcy5vaykgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXJJbmZvKCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSlcclxuICAgIH1cclxuXHJcbiAgICBnZXRJbml0aWFsQ2FyZHMoKSB7XHJcbiAgICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSlcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVVc2VyRGF0YShkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgYWJvdXQ6IGRhdGEuYWJvdXRcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVVzZXJBdmF0YXIoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICBhdmF0YXI6IGRhdGEuYXZhdGFyXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKSAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBhZGROZXdDYXJkKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGRhdGEubmFtZSxcclxuICAgICAgICAgICAgICAgIGxpbms6IGRhdGEubGlua1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSlcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVDYXJkKGNhcmRJRCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJRH1gLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSlcclxuICAgIH1cclxuXHJcbiAgICBsaWtlQ2FyZChjYXJkSUQpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvbGlrZXMvJHtjYXJkSUR9YCwge1xyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnNcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpXHJcbiAgICB9XHJcblxyXG4gICAgdW5saWtlQ2FyZChjYXJkSUQpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvbGlrZXMvJHtjYXJkSUR9YCwge1xyXG4gICAgICAgICAgICBtZXRob2Q6IFwiRGVsZXRlXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnNcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpXHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IHNlbGVjdG9ycyB9KSB7XHJcbiAgICAgICAgdGhpcy5fc2VsZWN0b3JzID0gc2VsZWN0b3JzO1xyXG4gICAgICAgIHRoaXMuX3VzZXJOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9zZWxlY3RvcnMubmFtZVNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLl91c2VySm9iID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9zZWxlY3RvcnMuam9iU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX3VzZXJBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX3NlbGVjdG9ycy5pbWFnZVNlbGVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRVc2VySW5mbygpIHtcclxuICAgICAgICByZXR1cm4ge25hbWU6IHRoaXMuX3VzZXJOYW1lLnRleHRDb250ZW50LCBhYm91dDogdGhpcy5fdXNlckpvYi50ZXh0Q29udGVudH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRVc2VySW5mbyhkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlck5hbWUudGV4dENvbnRlbnQgPSBkYXRhLm5hbWU7XHJcbiAgICAgICAgdGhpcy5fdXNlckpvYi50ZXh0Q29udGVudCA9IGRhdGEuYWJvdXQ7XHJcbiAgICAgICAgdGhpcy5fdXNlckF2YXRhci5zcmMgPSBkYXRhLmF2YXRhcjtcclxuICAgICAgICB0aGlzLmlkID0gZGF0YS5faWQ7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgICAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEl0ZW0oaXRlbSwgaXNOZXcpIHtcclxuICAgICAgICBjb25zdCBjYXJkID0gdGhpcy5fcmVuZGVyZXIoaXRlbSlcclxuICAgICAgICBpZiAoaXNOZXcpIHJldHVybiB0aGlzLl9jb250YWluZXIucHJlcGVuZChjYXJkKTsgLy9ubyBtb3JlIHNjcm9sbGluZyB0byB0aGUgYm90dG9tIHRvIHNlZSBpZiBteSBjYXJkIHNhdmVkL2RlbGV0ZWQvc3RheWVkIGxpa2VkXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lci5hcHBlbmQoY2FyZCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aENvbmZpcm1hdGlvbiBleHRlbmRzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGNsaWNrSGFuZGxlcikge1xyXG4gICAgICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX2NsaWNrSGFuZGxlciA9IGNsaWNrSGFuZGxlcjtcclxuICAgICAgICB0aGlzLl9jb25maXJtQnV0dG9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2J1dHRvblwiKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB0aGlzLl9jb25maXJtQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fY2xpY2tIYW5kbGVyKCk7XHJcbiAgICAgICAgfSApXHJcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJFcnJvciA9IChtZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fY29uZmlybUJ1dHRvbi50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XHJcbiAgICAgICAgdGhpcy5fY29uZmlybUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwicG9wdXBfX2J1dHRvbl9zdGF0dXNfZXJyb3JcIik7XHJcbiAgICAgICAgdGhpcy5fY29uZmlybUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCB0cnVlKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fY29uZmlybUJ1dHRvbi50ZXh0Q29udGVudCA9IHRoaXMuX2NvbmZpcm1CdXR0b24ubmFtZTtcclxuICAgICAgICAgICAgdGhpcy5fY29uZmlybUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwicG9wdXBfX2J1dHRvbl9zdGF0dXNfZXJyb3JcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpcm1CdXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgfSwgMzAwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbihvYmopIHtcclxuICAgICAgICB0aGlzLmZvY3VzZWRPYmogPSBvYmo7XHJcbiAgICAgICAgc3VwZXIub3BlbigpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgICAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuKHRpdGxlLCBsaW5rKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBJbWFnZSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19pbWFnZVwiKTtcclxuICAgICAgICB0aGlzLl9wb3B1cEltYWdlVGl0bGUgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9faW1hZ2UtdGl0bGVcIik7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBJbWFnZS5zcmMgPSBsaW5rO1xyXG4gICAgICAgIHRoaXMuX3BvcHVwSW1hZ2UuYWx0ID0gYEltYWdlIG9mICR7dGl0bGV9YDtcclxuICAgICAgICB0aGlzLl9wb3B1cEltYWdlVGl0bGUudGV4dENvbnRlbnQgPSB0aXRsZTtcclxuICAgICAgICBzdXBlci5vcGVuKCk7XHJcbiAgICB9XHJcbn0iXSwibmFtZXMiOlsiQ2FyZCIsImNvbnN0cnVjdG9yIiwic2VsZWN0b3JzIiwiZGF0YSIsImNsaWNrSGFuZGxlciIsImxpa2VIYW5kbGVyIiwiZGVsZXRlSGFuZGxlciIsInVzZXJJRCIsInRoaXMiLCJfbmFtZSIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfbGlrZXMiLCJsaWtlcyIsImlkIiwiX2lkIiwiX3NlbGVjdG9ycyIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfaGFuZGxlTGlrZUNsaWNrIiwiX2hhbmRsZURlbGV0ZUNsaWNrIiwiX3VzZXJJRCIsImlzTGlrZWQiLCJfZ2V0VGVtcGxhdGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0ZW1wbGF0ZVNlbGVjdG9yIiwiY29udGVudCIsImNhcmRTZWxlY3RvciIsImNsb25lTm9kZSIsIl9jaGVja0xpa2VzIiwiZm9yRWFjaCIsImxpa2UiLCJpbml0aWF0ZUNhcmQiLCJpc1VzZXJDYXJkIiwiX2NhcmRFbGVtZW50IiwidGl0bGUiLCJ0aXRsZVNlbGVjdG9yIiwiX2ltYWdlIiwiaW1hZ2VTZWxlY3RvciIsIl9saWtlIiwibGlrZVNlbGVjdG9yIiwiY2xhc3NMaXN0IiwiYWRkIiwibGlrZUFjdGl2ZUNsYXNzIiwiX2xpa2VDb3VudCIsImxpa2VDb3VudFNlbGVjdG9yIiwic2V0TGlrZUNvdW50IiwibGVuZ3RoIiwiX2RlbGV0ZSIsImRlbGV0ZVNlbGVjdG9yIiwidGV4dENvbnRlbnQiLCJhbHQiLCJzcmMiLCJyZW1vdmUiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJsaWtlQ291bnQiLCJhZGRFdmVudExpc3RlbmVyIiwibGlrZUNhcmQiLCJ1bmxpa2VDYXJkIiwiZGVsZXRlQ2FyZCIsIkZvcm1WYWxpZGF0b3IiLCJmb3JtU2VsZWN0b3IiLCJ2YWxpZGF0aW9uS2V5cyIsIl9mb3JtRWxlbWVudCIsIl9rZXlzIiwiZW5hYmxlVmFsaWRhdGlvbiIsImV2dCIsInByZXZlbnREZWZhdWx0IiwiX2lucHV0TGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnB1dFNlbGVjdG9yIiwiX2J1dHRvbkVsZW1lbnQiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl90b2dnbGVCdXR0b25TdGF0ZSIsInNldFRpbWVvdXQiLCJpbnB1dEVsZW1lbnQiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9oaWRlSW5wdXRFcnJvciIsIl9zaG93SW5wdXRFcnJvciIsInZhbGlkYXRpb25NZXNzYWdlIiwiZXJyb3JNZXNzYWdlIiwiZXJyb3JFbGVtZW50IiwiaW5wdXRFcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9oYXNJbnZhbGlkSW5wdXQiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwic29tZSIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsImtleSIsImNsb3NlIiwidGFyZ2V0IiwiY29udGFpbnMiLCJfcG9wdXBFbGVtZW50IiwiX2Nsb3NlQnV0dG9uIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9oYW5kbGVFc2NDbG9zZSIsIm9wZW4iLCJzZXRFdmVudExpc3RlbmVycyIsIl9oYW5kbGVDbGlja0Nsb3NlIiwiUG9wdXBXaXRoRm9ybSIsInN1Ym1pdEhhbmRsZXIiLCJzdXBlciIsImlucHV0IiwidmFsdWUiLCJfc3VibWl0QnV0dG9uIiwiZXJyb3IiLCJfc3VibWl0SGFuZGxlciIsIl9nZXRJbnB1dFZhbHVlcyIsInJlc3VsdHMiLCJpbnB1dHMiLCJyZXNldCIsInZhbGlkYXRpb25PYmoiLCJjYXJkU2VsZWN0b3JMaXN0IiwiZWRpdEJ1dHRvbiIsImFkZEJ1dHRvbiIsImF2YXRhckJ1dHRvbiIsInByb2plY3RBcGkiLCJiYXNlVXJsIiwiaGVhZGVycyIsIl9iYXNlVXJsIiwiX2hlYWRlcnMiLCJfY2hlY2tSZXNwb25zZSIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJnZXRVc2VySW5mbyIsImZldGNoIiwidGhlbiIsImdldEluaXRpYWxDYXJkcyIsInVwZGF0ZVVzZXJEYXRhIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJhYm91dCIsInVwZGF0ZVVzZXJBdmF0YXIiLCJhdmF0YXIiLCJhZGROZXdDYXJkIiwiY2FyZElEIiwiYXV0aG9yaXphdGlvbiIsInVzZXJCaW8iLCJfdXNlck5hbWUiLCJuYW1lU2VsZWN0b3IiLCJfdXNlckpvYiIsImpvYlNlbGVjdG9yIiwiX3VzZXJBdmF0YXIiLCJzZXRVc2VySW5mbyIsImNhcmRTZWN0aW9uIiwiY29udGFpbmVyU2VsZWN0b3IiLCJyZW5kZXJlciIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJhZGRJdGVtIiwiaXRlbSIsImlzTmV3IiwiY2FyZCIsInByZXBlbmQiLCJhcHBlbmQiLCJjYXJkRGF0YSIsImNhcmRJdGVtIiwicG9wdXBJbWFnZSIsIm9iaiIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImxvZyIsImRlbGV0ZUNvbmZpcm1hdG9uIiwib3duZXIiLCJiaW9Gb3JtIiwicmVuZGVyTG9hZGluZyIsInJlbmRlclN1Y2Nlc3MiLCJyZW5kZXJFcnJvciIsImZpbmFsbHkiLCJyZXN0b3JlQnV0dG9uRGVmYXVsdHMiLCJhZGRGb3JtIiwiYXZhdGFyRm9ybSIsIm1lc3NhZ2UiLCJfY29uZmlybUJ1dHRvbiIsIl9jbGlja0hhbmRsZXIiLCJmb2N1c2VkT2JqIiwiX3BvcHVwSW1hZ2UiLCJfcG9wdXBJbWFnZVRpdGxlIiwic2VsZWN0b3IiLCJhbGwiLCJ1c2VyRGF0YSIsImNhcmRzIiwidXNlckVyciIsImNhcmRzRXJyIiwic2V0SW5wdXRWYWx1ZXMiXSwic291cmNlUm9vdCI6IiJ9